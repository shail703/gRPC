# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import lms_pb2 as lms__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in lms_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LMSStub(object):
    """The LMS service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterStudent = channel.unary_unary(
                '/lms.LMS/RegisterStudent',
                request_serializer=lms__pb2.RegisterRequest.SerializeToString,
                response_deserializer=lms__pb2.RegisterResponse.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/lms.LMS/Login',
                request_serializer=lms__pb2.LoginRequest.SerializeToString,
                response_deserializer=lms__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.Get = channel.unary_unary(
                '/lms.LMS/Get',
                request_serializer=lms__pb2.GetRequest.SerializeToString,
                response_deserializer=lms__pb2.GetResponse.FromString,
                _registered_method=True)
        self.Post = channel.unary_unary(
                '/lms.LMS/Post',
                request_serializer=lms__pb2.PostRequest.SerializeToString,
                response_deserializer=lms__pb2.PostResponse.FromString,
                _registered_method=True)
        self.Logout = channel.unary_unary(
                '/lms.LMS/Logout',
                request_serializer=lms__pb2.LogoutRequest.SerializeToString,
                response_deserializer=lms__pb2.LogoutResponse.FromString,
                _registered_method=True)
        self.GetUsers = channel.unary_unary(
                '/lms.LMS/GetUsers',
                request_serializer=lms__pb2.GetUsersRequest.SerializeToString,
                response_deserializer=lms__pb2.GetUsersResponse.FromString,
                _registered_method=True)
        self.UploadFile = channel.unary_unary(
                '/lms.LMS/UploadFile',
                request_serializer=lms__pb2.UploadFileRequest.SerializeToString,
                response_deserializer=lms__pb2.UploadFileResponse.FromString,
                _registered_method=True)
        self.DownloadFile = channel.unary_unary(
                '/lms.LMS/DownloadFile',
                request_serializer=lms__pb2.DownloadFileRequest.SerializeToString,
                response_deserializer=lms__pb2.DownloadFileResponse.FromString,
                _registered_method=True)
        self.CreateAssignment = channel.unary_unary(
                '/lms.LMS/CreateAssignment',
                request_serializer=lms__pb2.AssignmentRequest.SerializeToString,
                response_deserializer=lms__pb2.AssignmentResponse.FromString,
                _registered_method=True)
        self.GetAssignment = channel.unary_unary(
                '/lms.LMS/GetAssignment',
                request_serializer=lms__pb2.AssignmentQuery.SerializeToString,
                response_deserializer=lms__pb2.AssignmentDetails.FromString,
                _registered_method=True)
        self.ViewSubmission = channel.unary_unary(
                '/lms.LMS/ViewSubmission',
                request_serializer=lms__pb2.ViewSubmissionRequest.SerializeToString,
                response_deserializer=lms__pb2.ViewSubmissionResponse.FromString,
                _registered_method=True)
        self.ViewQuestions = channel.unary_unary(
                '/lms.LMS/ViewQuestions',
                request_serializer=lms__pb2.ViewQuestionsRequest.SerializeToString,
                response_deserializer=lms__pb2.ViewQuestionsResponse.FromString,
                _registered_method=True)
        self.CreateMaterial = channel.unary_unary(
                '/lms.LMS/CreateMaterial',
                request_serializer=lms__pb2.MaterialRequest.SerializeToString,
                response_deserializer=lms__pb2.MaterialResponse.FromString,
                _registered_method=True)


class LMSServicer(object):
    """The LMS service definition
    """

    def RegisterStudent(self, request, context):
        """Register a new student
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Login for both students and teachers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Generic GET request to retrieve various data like assignments, submissions, grades, etc.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Post(self, request, context):
        """Generic POST request to submit assignments, add doubts, grade, etc.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Logout from the system
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAssignment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAssignment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ViewSubmission(self, request, context):
        """New RPC for viewing student's assignment submission
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ViewQuestions(self, request, context):
        """New RPC method
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateMaterial(self, request, context):
        """rpc getLLMAnswer(LLMQueryRequest) returns (LLMQueryResponse);
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LMSServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterStudent': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterStudent,
                    request_deserializer=lms__pb2.RegisterRequest.FromString,
                    response_serializer=lms__pb2.RegisterResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=lms__pb2.LoginRequest.FromString,
                    response_serializer=lms__pb2.LoginResponse.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=lms__pb2.GetRequest.FromString,
                    response_serializer=lms__pb2.GetResponse.SerializeToString,
            ),
            'Post': grpc.unary_unary_rpc_method_handler(
                    servicer.Post,
                    request_deserializer=lms__pb2.PostRequest.FromString,
                    response_serializer=lms__pb2.PostResponse.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=lms__pb2.LogoutRequest.FromString,
                    response_serializer=lms__pb2.LogoutResponse.SerializeToString,
            ),
            'GetUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUsers,
                    request_deserializer=lms__pb2.GetUsersRequest.FromString,
                    response_serializer=lms__pb2.GetUsersResponse.SerializeToString,
            ),
            'UploadFile': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadFile,
                    request_deserializer=lms__pb2.UploadFileRequest.FromString,
                    response_serializer=lms__pb2.UploadFileResponse.SerializeToString,
            ),
            'DownloadFile': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadFile,
                    request_deserializer=lms__pb2.DownloadFileRequest.FromString,
                    response_serializer=lms__pb2.DownloadFileResponse.SerializeToString,
            ),
            'CreateAssignment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAssignment,
                    request_deserializer=lms__pb2.AssignmentRequest.FromString,
                    response_serializer=lms__pb2.AssignmentResponse.SerializeToString,
            ),
            'GetAssignment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAssignment,
                    request_deserializer=lms__pb2.AssignmentQuery.FromString,
                    response_serializer=lms__pb2.AssignmentDetails.SerializeToString,
            ),
            'ViewSubmission': grpc.unary_unary_rpc_method_handler(
                    servicer.ViewSubmission,
                    request_deserializer=lms__pb2.ViewSubmissionRequest.FromString,
                    response_serializer=lms__pb2.ViewSubmissionResponse.SerializeToString,
            ),
            'ViewQuestions': grpc.unary_unary_rpc_method_handler(
                    servicer.ViewQuestions,
                    request_deserializer=lms__pb2.ViewQuestionsRequest.FromString,
                    response_serializer=lms__pb2.ViewQuestionsResponse.SerializeToString,
            ),
            'CreateMaterial': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateMaterial,
                    request_deserializer=lms__pb2.MaterialRequest.FromString,
                    response_serializer=lms__pb2.MaterialResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lms.LMS', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lms.LMS', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LMS(object):
    """The LMS service definition
    """

    @staticmethod
    def RegisterStudent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/RegisterStudent',
            lms__pb2.RegisterRequest.SerializeToString,
            lms__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/Login',
            lms__pb2.LoginRequest.SerializeToString,
            lms__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/Get',
            lms__pb2.GetRequest.SerializeToString,
            lms__pb2.GetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Post(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/Post',
            lms__pb2.PostRequest.SerializeToString,
            lms__pb2.PostResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/Logout',
            lms__pb2.LogoutRequest.SerializeToString,
            lms__pb2.LogoutResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/GetUsers',
            lms__pb2.GetUsersRequest.SerializeToString,
            lms__pb2.GetUsersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/UploadFile',
            lms__pb2.UploadFileRequest.SerializeToString,
            lms__pb2.UploadFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DownloadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/DownloadFile',
            lms__pb2.DownloadFileRequest.SerializeToString,
            lms__pb2.DownloadFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateAssignment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/CreateAssignment',
            lms__pb2.AssignmentRequest.SerializeToString,
            lms__pb2.AssignmentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAssignment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/GetAssignment',
            lms__pb2.AssignmentQuery.SerializeToString,
            lms__pb2.AssignmentDetails.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ViewSubmission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/ViewSubmission',
            lms__pb2.ViewSubmissionRequest.SerializeToString,
            lms__pb2.ViewSubmissionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ViewQuestions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/ViewQuestions',
            lms__pb2.ViewQuestionsRequest.SerializeToString,
            lms__pb2.ViewQuestionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateMaterial(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/CreateMaterial',
            lms__pb2.MaterialRequest.SerializeToString,
            lms__pb2.MaterialResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class LLMServiceStub(object):
    """Existing methods
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getLLMAnswer = channel.unary_unary(
                '/lms.LLMService/getLLMAnswer',
                request_serializer=lms__pb2.LLMQueryRequest.SerializeToString,
                response_deserializer=lms__pb2.LLMQueryResponse.FromString,
                _registered_method=True)


class LLMServiceServicer(object):
    """Existing methods
    """

    def getLLMAnswer(self, request, context):
        """LLM query method
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LLMServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getLLMAnswer': grpc.unary_unary_rpc_method_handler(
                    servicer.getLLMAnswer,
                    request_deserializer=lms__pb2.LLMQueryRequest.FromString,
                    response_serializer=lms__pb2.LLMQueryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lms.LLMService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lms.LLMService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LLMService(object):
    """Existing methods
    """

    @staticmethod
    def getLLMAnswer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LLMService/getLLMAnswer',
            lms__pb2.LLMQueryRequest.SerializeToString,
            lms__pb2.LLMQueryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
